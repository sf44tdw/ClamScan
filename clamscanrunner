#!/bin/bash

source /root/.bash_profile >/dev/null 2>&1 || exit 1

#アップデータ
readonly UPDATOR="freshclam"

#スキャナ
readonly SCANNER="clamscan"

#このスクリプトの名前。
readonly MY_NAME=$(basename "${0}")

#サービスが起動中のステータスをあらわす文字列。
readonly STATUS_ACTIVE="active"

#サービスが停止中のステータスをあらわす文字列。
readonly STATUS_INACTIVE="inactive"

#サービスが有効の時の文字列。
readonly STATUS_ENABLED="enabled"

# rootのcrontabに起動設定を書くなどして、rootで動くようにしないとログが残らない。

#このスクリプトの名前。
readonly MY_NAME=$(basename "${0}")

#ロックファイルのパス
_lockfile="/tmp/${MY_NAME}.lock"

function delete_lock_file_and_exit() {
	local -r EXIT_CODE="${1}"
	expr "${EXIT_CODE}" + 1 >/dev/null 2>&1
	local -r ret="${?}"
	if [ "${ret}" -ge 2 ]; then
		echo "指定された戻り値が数字ではない。戻り値=${EXIT_CODE}"1 >&2
		exit 100
	fi
	if [ -h "${_lockfile}" ]; then
		if ! rm -f "${_lockfile}" >/dev/null 2>&1; then
			echo "ロックファイル削除失敗。戻り値はrmのものになる。ロックファイル=${_lockfile}"1 >&2
			exit "${?}"
		fi
	fi
	exit "${EXIT_CODE}"
}

function delete_lock_and_exit() {
	echo "${1}_${3}" >>"${2}"
	delete_lock_file_and_exit "${3}"
}

function usage_exit() {
	echo "Usage: $0 [-f]" 1>&2
	echo 'fleshclamとclamscanを実行する。-f 設定(多重起動防止と実行時間の制限を無視する。)' 1>&2
	exit 1
}

function wait_2_min() {
	sleep 120
}

ENABLE_f="f"

while getopts "f" OPT; do
	case $OPT in
	f)
		ENABLE_f="t"
		;;
	: | \?)
		usage_exit
		;;
	esac
done

shift $((OPTIND - 1))

readonly ISODIR="/var/clamav-isolate-file"

mkdir -p "${ISODIR}" && chmod 644 "${ISODIR}"

# 除外パスリストの読み込み。
#ディレクトリは末尾に/。
#ファイルは末尾に/なし。
readonly EXCLUDELIST="/etc/clamscan.exclude"
EXCLUDEOPT=()
if [ -s "${EXCLUDELIST}" ]; then
	EXCLUDEOPT[1]="--exclude-dir=^$ISODIR"
	for i in $(cat "${EXCLUDELIST}"); do
		if [ "$(echo "${i}" | grep \/$)" ]; then
			i=$(echo "${i}" | sed -e 's/^\([^ ]*\)\/$/\1/p' -e d)
			EXCLUDEOPT+=("--exclude-dir=^$i")
		else
			EXCLUDEOPT+=("--exclude=$i")
		fi
	done
fi

#ロックファイル生成。
ln -s /dummy "${_lockfile}" >/dev/null 2>&1 || {
	echo 'Cannot run multiple instance.'
	#他のプロセスが起動中なのでロックファイルは削除しない。
	exit 110
}

trap 'rm "${_lockfile}"; exit' SIGHUP SIGINT SIGQUIT SIGTERM

readonly LOGDIR="/var/log/clamav-scan-log"
readonly LOGFILE="${LOGDIR}/$(date +%Y%m%d%H%M%S).log"

mkdir -p "${LOGDIR}" && chmod 755 "${LOGDIR}"

date +%Y%m%d%H%M%S >>"${LOGFILE}"

if [ "${ENABLE_f}" != "t" ]; then
	#今の時間(何時?)
	NowHour=$(date +%-H)
	#割る数
	readonly Dev=1

	echo "now=${NowHour}" >>"${LOGFILE}"
	echo "dev=${Dev}" >>"${LOGFILE}"

	mod="$((${NowHour} % ${Dev}))"
	#制限が有効で、割る数で割り切れない時間なら起動しない。
	if [ ! "0" -eq ${mod} ]; then
		delete_lock_and_exit "起動間隔を制限しています。この時間は終了します。" "${LOGFILE}" 2
	fi
fi

#制限が有効で、clamscanもしくはfreshclamが既に実行中だった場合、起動しない。
if [ "${ENABLE_f}" != "t" ]; then
	count=$(pgrep "${UPDATOR}" | grep -v "${UPDATOR}-sleep" | grep -v grep | grep -v "${MY_NAME}" | wc -l)
	if [ "${count}" != 0 ]; then
		delete_lock_and_exit "${UPDATOR}が起動中です。終了します。" "${LOGFILE}" 3
	fi
	count=$(pgrep "${SCANNER}" | grep -v grep | grep -v "${MY_NAME}" | wc -l)
	if [ "${count}" != 0 ]; then
		delete_lock_and_exit "${SCANNER}が起動中です。終了します。" "${LOGFILE}" 3
	fi

fi

# ファイル更新日時が5000日を越えたログファイルを削除
readonly PARAM_DATE_NUM=5000
find "${LOGDIR}" -name "*.log" -type f -mtime +"${PARAM_DATE_NUM}" -exec rm -f {} \;

date +%Y%m%d%H%M%S >>"${LOGFILE}"

# DB update
# epelからインストールの場合、freshclamのインストール時に、3時間ごとの自動更新(freshclam-sleep)が登録されるのであまり意味が無いが、念のため。
${UPDATOR} >>"${LOGFILE}" 2>&1
readonly RET_FRESHCLAM="${?}"

date +%Y%m%d%H%M%S >>"${LOGFILE}"
if [ "${RET_FRESHCLAM}" -ne 0 ]; then
	delete_lock_and_exit "freshclamの戻り値が${RET_FRESHCLAM}です。終了します。" "${LOGFILE}" 3
fi

#clamdのメモリ消費量が大きいので、スキャン中はオンアクセススキャンを停止する。
#サービスが有効では無い場合は何もしない。

readonly ON_ACCESS_SCAN_SERVICE='clamonacc'
readonly CLAMD_SERVICE='clamd@scan'

#関連するサービスの有効性を確認する。
readonly ON_ACCESS_ENABLED=$(systemctl is-enabled ${ON_ACCESS_SCAN_SERVICE})
readonly CLAMD_ENABLED=$(systemctl is-enabled ${CLAMD_SERVICE})

echo "オンアクセススキャンを停止する。" >>"${LOGFILE}"
if [ "${ON_ACCESS_ENABLED}" = "${STATUS_ENABLED}" ]; then
	readonly STATUS_CLAMONACC_PRE_BEFORE_SCAN=$(systemctl is-active ${ON_ACCESS_SCAN_SERVICE})
	echo "clamonaccの状態(停止前) = ${STATUS_CLAMONACC_PRE_BEFORE_SCAN}" >>"${LOGFILE}"
	if [ "${STATUS_CLAMONACC_PRE_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
		echo "${ON_ACCESS_SCAN_SERVICE}の停止" >>"${LOGFILE}"
		systemctl stop "${ON_ACCESS_SCAN_SERVICE}"
		readonly STATUS_CLAMONACC_POST_BEFORE_SCAN=$(systemctl is-active ${ON_ACCESS_SCAN_SERVICE})
		echo "clamonaccの状態(停止後) = ${STATUS_CLAMONACC_POST_BEFORE_SCAN}" >>"${LOGFILE}"
		if [ "${STATUS_CLAMONACC_POST_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
			delete_lock_and_exit "${ON_ACCESS_SCAN_SERVICE}が停止していません。終了します。" "${LOGFILE}" 4
		fi
	fi
	wait_2_min
fi

if [ "${CLAMD_ENABLED}" = "${STATUS_ENABLED}" ]; then
	readonly STATUS_CLAMD_PRE_BEFORE_SCAN=$(systemctl is-active ${CLAMD_SERVICE})
	echo "clamdの状態(停止前) = ${STATUS_CLAMD_PRE_BEFORE_SCAN}" >>"${LOGFILE}"
	if [ "${STATUS_CLAMD_PRE_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
		echo "${CLAMD_SERVICE}の停止" >>"${LOGFILE}"
		systemctl stop "${CLAMD_SERVICE}"
		readonly STATUS_CLAMD_POST_BEFORE_SCAN=$(systemctl is-active ${CLAMD_SERVICE})
		echo "clamdの状態(停止後) = ${STATUS_CLAMD_POST_BEFORE_SCAN}" >>"${LOGFILE}"
		if [ "${STATUS_CLAMD_POST_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
			delete_lock_and_exit "${CLAMD_SERVICE}が停止していません。終了します。" "${LOGFILE}" 5
		fi
	fi
	wait_2_min
fi

echo "オンアクセススキャンの停止を完了。" >>"${LOGFILE}"

date +%Y%m%d%H%M%S >>"${LOGFILE}"

# virus scan
#感染したファイルのみログに記載する。
#感染したファイルは隔離する。
readonly _NICE_ARGS=("-n" "20" "${SCANNER}" "/" "-r" "--infected" "--move=${ISODIR}")
readonly NICE_ARGS=("${_NICE_ARGS[@]}" "${EXCLUDEOPT[@]}")
nice "${NICE_ARGS[@]}" >>"${LOGFILE}" 2>&1

readonly RET_CLAMSCAN="${?}"
if [ "${RET_CLAMSCAN}" -ne 0 ]; then
	date +%Y%m%d%H%M%S >>"${LOGFILE}"
	echo "clamscanの戻り値が${RET_CLAMSCAN}です。" >>"${LOGFILE}"
fi

#再開の際は、ステータスがactiveでないなら再始動を試みる。

date +%Y%m%d%H%M%S >>"${LOGFILE}"

echo "オンアクセススキャンを再開する。" >>"${LOGFILE}"

if [ "${CLAMD_ENABLED}" = "${STATUS_ENABLED}" ]; then
	readonly STATUS_CLAMD_PRE_AFTER_SCAN=$(systemctl is-active ${CLAMD_SERVICE})
	echo "clamdの状態(再開前前) = ${STATUS_CLAMD_PRE_AFTER_SCAN}" >>"${LOGFILE}"
	if [ "${STATUS_CLAMD_PRE_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
		echo "clamdの開始" >>"${LOGFILE}" 2>&1
		systemctl restart "${CLAMD_SERVICE}"
		readonly STATUS_CLAMD_POST_AFTER_SCAN=$(systemctl is-active ${CLAMD_SERVICE})
		echo "clamdの状態(再開後) = ${STATUS_CLAMD_POST_AFTER_SCAN}" >>"${LOGFILE}"
		if [ "${STATUS_CLAMD_POST_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
			delete_lock_and_exit "${CLAMD_SERVICE}の開始に失敗しました。終了します。" "${LOGFILE}" 7
		fi
	fi
	wait_2_min
fi

if [ "${ON_ACCESS_ENABLED}" = "${STATUS_ENABLED}" ]; then
	readonly STATUS_CLAMONACC_PRE_AFTER_SCAN=$(systemctl is-active ${ON_ACCESS_SCAN_SERVICE})
	echo "clamonaccの状態(再開前) = ${STATUS_CLAMONACC_PRE_AFTER_SCAN}" >>"${LOGFILE}"
	if [ "${STATUS_CLAMONACC_PRE_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
		echo "${ON_ACCESS_SCAN_SERVICE}の開始" >>"${LOGFILE}"
		systemctl restart "${ON_ACCESS_SCAN_SERVICE}"
		readonly STATUS_CLAMONACC_POST_AFTER_SCAN=$(systemctl is-active ${ON_ACCESS_SCAN_SERVICE})
		echo "clamonaccの状態(再開後) = ${STATUS_CLAMONACC_POST_AFTER_SCAN}" >>"${LOGFILE}"
		if [ "${STATUS_CLAMONACC_POST_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
			delete_lock_and_exit "${ON_ACCESS_SCAN_SERVICE}の開始に失敗しました。終了します。" "${LOGFILE}" 8
		fi
	fi
	wait_2_min
fi

echo "オンアクセススキャンの再開を完了。" >>"${LOGFILE}"

date +%Y%m%d%H%M%S >>"${LOGFILE}"

#ログファイルの内容を表示
cat "${LOGFILE}"

delete_lock_and_exit "正常終了します。" "${LOGFILE}" 0
