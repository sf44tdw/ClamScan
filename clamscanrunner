#!/bin/bash

. /root/.bash_profile

#サービスが起動中のステータスをあらわす文字列。
readonly STATUS_ACTIVE="active"
#サービスが停止中のステータスをあらわす文字列。
readonly STATUS_INACTIVE="inactive"

# rootのcrontabに起動設定を書くなどして、rootで動くようにしないとログが残らない。


usage_exit() {
        echo "Usage: $0 [-f]" 1>&2
        echo 'fleshclamとclamscanを実行する。-f 設定(多重起動防止と実行時間の制限を無視する。)' 1>&2
        exit 1
}

delete_lock_and_exit() {
        echo "${2}_${4}" >>"${3}"
        rm "${1}"
        exit "${4}"
}

wait_2_min(){
sleep 120
}

ENABLE_f="f"


while getopts "f" OPT
do
    case $OPT in
        f)  ENABLE_f="t"
            ;;
        :|\?) usage_exit
            ;;
    esac
done

shift $((OPTIND - 1))

LOGDIR=""
LOGDIR="/var/log/clamav-scan-log"
LOGFILE=""
LOGFILE="${LOGDIR}/`date +%Y%m%d%H%M%S`.log"

if [ ! -e "${LOGDIR}" ]; then
`mkdir -p -m 755 "${LOGDIR}"`
fi

touch "${LOGFILE}"

echo `date +%Y%m%d%H%M%S` >>"${LOGFILE}"

if [ "${ENABLE_f}" != "t" ]; then  
 #今の時間(何時?)
 NowHour=`date +%k`
 #割る数
 Dev=1

echo "now=${NowHour}" >>"${LOGFILE}"
echo "dev=${Dev}" >>"${LOGFILE}"


 mod=$(( ${NowHour} % ${Dev} ))
 #制限が有効で、割る数で割り切れない時間なら起動しない。
 if [ ! "0" -eq ${mod} ]; then  
   exit 2
fi
fi

#多重起動防止機講
# 制限が有効で、同じ名前のプロセスが起動していたら起動しない。
_lockfile="/tmp/`basename $0`.lock"
if [ "${ENABLE_f}" = "t" ]; then  
rm -f $_lockfile
fi
ln -s /dummy $_lockfile 2> /dev/null || { echo 'Cannot run multiple instance.'  >>"${LOGFILE}"; exit 9; }
trap "rm -f $_lockfile; exit" 1 2 3 15

# ファイル更新日時が5000日を越えたログファイルを削除
readonly PARAM_DATE_NUM=5000
find ${LOGDIR} -name "*.log" -type f -mtime +${PARAM_DATE_NUM} -exec rm -f {} \;


# DB update
# CentOS(epelからインストール)の場合、freshclamのインストール時に、3時間ごとの自動更新が登録されるのであまり意味が無いが、念のため。
# debian系でfreshclam実行時に下記のようなエラーが出るようならRETRY_FRESHCLAMを0以外に設定する。
# ERROR: /var/log/clamav/freshclam.log is locked by another process
# ERROR: Problem with internal logger (UpdateLogFile = /var/log/clamav/freshclam.log).
readonly RETRY_FRESHCLAM=0
if [ ! "0" -eq ${RETRY_FRESHCLAM} ]; then  
	echo "freshclam失敗時は、freshclamログ再作成後リトライ。" >> ${LOGFILE} 2>&1
	FRESHCLAM_LOGFILE="/var/log/clamav/freshclam.log"
	freshclam >> ${LOGFILE} 2>&1 || rm -f ${FRESHCLAM_LOGFILE} && touch ${FRESHCLAM_LOGFILE} && chown clamav:clamav ${FRESHCLAM_LOGFILE} && freshclam >> ${LOGFILE} 2>&1
else
	echo "freshclam失敗時は、リトライしない。" >> ${LOGFILE} 2>&1
	freshclam >> ${LOGFILE} 2>&1
fi

echo `date +%Y%m%d%H%M%S` >>"${LOGFILE}"

#clamdのメモリ消費量が大きいので、スキャン中はオンアクセススキャンを停止する。
echo "オンアクセススキャンを停止する。" >> ${LOGFILE} 2>&1

STATUS_CLAMONACC_PRE_BEFORE_SCAN=$(systemctl is-active clamonacc)
echo "clamonaccの状態(停止前) = ${STATUS_CLAMONACC_PRE_BEFORE_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMONACC_PRE_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
echo "clamonaccの停止" >> ${LOGFILE} 2>&1
systemctl stop clamonacc
STATUS_CLAMONACC_POST_BEFORE_SCAN=$(systemctl is-active clamonacc)
echo "clamonaccの状態(停止後) = ${STATUS_CLAMONACC_POST_BEFORE_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMONACC_POST_BEFORE_SCAN}" != "${STATUS_INACTIVE}" ]; then
delete_lock_and_exit $_lockfile "clamonaccの停止に失敗しました。終了します。" ${LOGFILE} 4
fi
fi

wait_2_min

STATUS_CLAMD_PRE_BEFORE_SCAN=$(systemctl is-active clamd@scan)
echo "clamdの状態(停止前) = ${STATUS_CLAMD_PRE_BEFORE_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMD_PRE_BEFORE_SCAN}" = "${STATUS_ACTIVE}" ]; then
echo "clamdの停止" >> ${LOGFILE} 2>&1
systemctl stop clamd@scan
STATUS_CLAMD_POST_BEFORE_SCAN=$(systemctl is-active clamd@scan)
echo "clamdの状態(停止後) = ${STATUS_CLAMD_POST_BEFORE_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMD_POST_BEFORE_SCAN}" != "${STATUS_INACTIVE}" ]; then
delete_lock_and_exit $_lockfile "clamdの停止に失敗しました。終了します。" ${LOGFILE} 5
fi
fi

wait_2_min

echo "オンアクセススキャンの停止を完了。" >> ${LOGFILE} 2>&1

echo `date +%Y%m%d%H%M%S` >>"${LOGFILE}"

# virus scan
#感染したファイルのみログに記載する。
#感染したファイルは削除する。
nice -n 20 clamscan / -r --infected --remove --exclude-dir='/sys|/proc|/dev' >> ${LOGFILE} 2>&1 || delete_lock_and_exit $_lockfile "clamscanに失敗しました。終了します。" ${LOGFILE} 6

#再開の際は、ステータスがactiveでないなら再始動を試みる。

echo `date +%Y%m%d%H%M%S` >>"${LOGFILE}"

echo "オンアクセススキャンを再開する。" >> ${LOGFILE} 2>&1

STATUS_CLAMD_PRE_AFTER_SCAN=$(systemctl is-active clamd@scan)
echo "clamdの状態(再開前前) = ${STATUS_CLAMD_PRE_AFTER_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMD_PRE_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
echo "clamdの開始" >> ${LOGFILE} 2>&1
systemctl restart clamd@scan
STATUS_CLAMD_POST_AFTER_SCAN=$(systemctl is-active clamd@scan)
echo "clamdの状態(再開後) = ${STATUS_CLAMD_POST_AFTER_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMD_POST_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
delete_lock_and_exit $_lockfile "clamdの開始に失敗しました。終了します。" ${LOGFILE} 7
fi
fi

wait_2_min

STATUS_CLAMONACC_PRE_AFTER_SCAN=$(systemctl is-active clamonacc)
echo "clamonaccの状態(再開前) = ${STATUS_CLAMONACC_PRE_AFTER_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMONACC_PRE_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
echo "clamonaccの開始" >> ${LOGFILE} 2>&1
systemctl restart clamonacc
STATUS_CLAMONACC_POST_AFTER_SCAN=$(systemctl is-active clamonacc)
echo "clamonaccの状態(再開後) = ${STATUS_CLAMONACC_POST_AFTER_SCAN}" >> ${LOGFILE} 2>&1
if [ "${STATUS_CLAMONACC_POST_AFTER_SCAN}" != "${STATUS_ACTIVE}" ]; then
delete_lock_and_exit $_lockfile "clamonaccの開始に失敗しました。終了します。" ${LOGFILE} 8
fi
fi

wait_2_min

echo "オンアクセススキャンの再開を完了。" >> ${LOGFILE} 2>&1

echo `date +%Y%m%d%H%M%S` >>"${LOGFILE}"

#ログファイルの内容を表示
cat ${LOGFILE}

rm -f $_lockfile

